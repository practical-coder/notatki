<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pl on Notatki</title>
    <link>https://practical-coder.github.io/tags/pl/</link>
    <description>Recent content in pl on Notatki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-pl</language>
    <copyright>©2016 Jac</copyright>
    <lastBuildDate>Sun, 19 Jun 2016 18:59:26 +0200</lastBuildDate><atom:link href="https://practical-coder.github.io/tags/pl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go przykład json api z użyciem Iris oraz GORM</title>
      <link>https://practical-coder.github.io/post/go-przyklad-json-api-z-uzyciem-iris-oraz-gorm/</link>
      <pubDate>Sun, 19 Jun 2016 18:59:26 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/go-przyklad-json-api-z-uzyciem-iris-oraz-gorm/</guid>
      <description>&lt;h2 id=&#34;organizacja-kodu&#34;&gt;Organizacja kodu&lt;/h2&gt;
&lt;p&gt;Zbudujmy przykładowe API do tworzenia notatek i tagów. Dane składowane są w
PostgreSQL, do uproszczenia wyciągania danych z bazy użyty zostanie GORM. Natomiast
do ułatwienia komunikacji HTTP oraz serializacji do formatu JSON
wykorzystany zostanie framework Iris.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Historia poleceń, czas wykonania komendy</title>
      <link>https://practical-coder.github.io/post/historia-polecen-czas-wykonania-komendy/</link>
      <pubDate>Sun, 19 Jun 2016 18:57:32 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/historia-polecen-czas-wykonania-komendy/</guid>
      <description>&lt;p&gt;Domyślnie pierwsza kolumna wpisu historii powłoki zawiera tylko id wykonanej komendy. Nie ma jednak informacji o czasie jej wykonania.
Aby taką informację dodać, należy ustawić format czasu jaki powinien być wpisywany w zmienną środowiskową &lt;strong&gt;HISTTIMEFORMAT&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Macos usługi nasłuchujące</title>
      <link>https://practical-coder.github.io/post/osx-uslugi-nasluchujace/</link>
      <pubDate>Sun, 19 Jun 2016 18:55:16 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/osx-uslugi-nasluchujace/</guid>
      <description>&lt;p&gt;W systemie Macos polecenie &lt;strong&gt;&lt;code&gt;netstat&lt;/code&gt;&lt;/strong&gt; zachowuje się inaczej niż pod Linuxem. Do wypisania usług nasłuchujących na portach tcp lokalnej maszyny można użyć polecenia &lt;strong&gt;&lt;code&gt;lsof&lt;/code&gt;&lt;/strong&gt;. Przykładowo:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim przywrócenie autouzupełniania</title>
      <link>https://practical-coder.github.io/post/vim-przywrocenie-autouzupelniania/</link>
      <pubDate>Sun, 19 Jun 2016 18:53:16 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/vim-przywrocenie-autouzupelniania/</guid>
      <description>Po aktualizacji Vim przestało działać autouzupełnianie. Wymagane jest w takim przypadku przejście do katalogu wtyczki YouCompleteMe, oraz odpalenie kompilacji ze wsparciem dla języka C oraz Go.
~ $ cd .vim/bundle/YouCompleteMe/ YouCompleteMe (master) $ ./install.py --clang-completer --gocode-completer </description>
    </item>
    
    <item>
      <title>Go: odbiorca metody, przykłady</title>
      <link>https://practical-coder.github.io/post/go-odbiorca-metody-przyklady/</link>
      <pubDate>Sun, 19 Jun 2016 09:03:31 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/go-odbiorca-metody-przyklady/</guid>
      <description>W Go po słowie kluczowym func, a przed nazwą metody, możemy określić jej odbiorcę. Jeżeli obiekt nie będzie modyfikowany, odbiorcę metody określamy przez jego wartość. W metodach Len(), Cap(), IsEmpty() oraz Top() odbiorcą jest Stack. Potrzebują one informacji o aktualnym stanie obiektu tylko do odczytu. Natomiast jeżeli metoda modyfikuje obiekt, wtedy odbiorca określany jest wskaźnikiem do obiektu. Tak się dzieje w metodach Push() i Pop(). Tam odbiorcą jest *Stack.
package stack import &amp;quot;errors&amp;quot; type Stack []interface{} func (stack Stack) Len() int { return len(stack) } func (stack Stack) Cap() int { return cap(stack) } func (stack Stack) IsEmpty() bool { return len(stack) == 0 } func (stack Stack) Top() (interface{}, error) { if stack.</description>
    </item>
    
  </channel>
</rss>
