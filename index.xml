<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notatki</title>
    <link>https://practical-coder.github.io/</link>
    <description>Recent content on Notatki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-pl</language>
    <copyright>©2016 Jac</copyright>
    <lastBuildDate>Tue, 26 Jun 2018 20:10:45 +0200</lastBuildDate>
    
	<atom:link href="https://practical-coder.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MacOS: adding custom route for VPN network</title>
      <link>https://practical-coder.github.io/post/macos_vpn_custom_client_route/</link>
      <pubDate>Tue, 26 Jun 2018 20:10:45 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/macos_vpn_custom_client_route/</guid>
      <description>Overview After connecting via Tunnelblick to OpenVPN server when you do not have connection to some part of the network, that you know is reachable, you can add route to that subnet manually on the client.
Identify VPN gateway Show routing table with numerical addresses only to get Gateway IPv4 address for utun1 VPN interfaces.
netstat -rn  Routing tables Internet: Destination Gateway Flags Refs Use Netif Expire 0/1 10.</description>
    </item>
    
    <item>
      <title>Docker Remote API - poligon</title>
      <link>https://practical-coder.github.io/post/docker-remote-api-poligon/</link>
      <pubDate>Sat, 16 Jul 2016 22:35:19 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/docker-remote-api-poligon/</guid>
      <description>&lt;h2 id=&#34;połączenie-z-gniazdem-unixowym&#34;&gt;Połączenie z gniazdem unixowym&lt;/h2&gt;

&lt;p&gt;Domyślnie usługa Docker zainstalowana na linuxie umożliwia komunikację z
Docker Remote API używając gniazda &lt;code&gt;/var/run/docker.sock&lt;/code&gt;. Podobnie jest
w przypadku instalacji Docker dla Mac wykorzystującej xhyvie.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go przykład json api z użyciem Iris oraz GORM</title>
      <link>https://practical-coder.github.io/post/go-przyklad-json-api-z-uzyciem-iris-oraz-gorm/</link>
      <pubDate>Sun, 19 Jun 2016 18:59:26 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/go-przyklad-json-api-z-uzyciem-iris-oraz-gorm/</guid>
      <description>&lt;h2 id=&#34;organizacja-kodu&#34;&gt;Organizacja kodu&lt;/h2&gt;

&lt;p&gt;Zbudujmy przykładowe API do tworzenia notatek i tagów. Dane składowane są w
PostgreSQL, do uproszczenia wyciągania danych z bazy użyty zostanie GORM. Natomiast
do ułatwienia komunikacji HTTP oraz serializacji do formatu JSON
wykorzystany zostanie framework Iris.

Struktura plików aplikacji:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Historia poleceń, czas wykonania komendy</title>
      <link>https://practical-coder.github.io/post/historia-polecen-czas-wykonania-komendy/</link>
      <pubDate>Sun, 19 Jun 2016 18:57:32 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/historia-polecen-czas-wykonania-komendy/</guid>
      <description>&lt;p&gt;Domyślnie pierwsza kolumna wpisu historii powłoki zawiera tylko id wykonanej komendy. Nie ma jednak informacji o czasie jej wykonania.
Aby taką informację dodać, należy ustawić format czasu jaki powinien być wpisywany w zmienną środowiskową &lt;strong&gt;HISTTIMEFORMAT&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Macos usługi nasłuchujące</title>
      <link>https://practical-coder.github.io/post/osx-uslugi-nasluchujace/</link>
      <pubDate>Sun, 19 Jun 2016 18:55:16 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/osx-uslugi-nasluchujace/</guid>
      <description>&lt;p&gt;W systemie Macos polecenie &lt;strong&gt;&lt;code&gt;netstat&lt;/code&gt;&lt;/strong&gt; zachowuje się inaczej niż pod Linuxem. Do wypisania usług nasłuchujących na portach tcp lokalnej maszyny można użyć polecenia &lt;strong&gt;&lt;code&gt;lsof&lt;/code&gt;&lt;/strong&gt;. Przykładowo:
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim przywrócenie autouzupełniania</title>
      <link>https://practical-coder.github.io/post/vim-przywrocenie-autouzupelniania/</link>
      <pubDate>Sun, 19 Jun 2016 18:53:16 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/vim-przywrocenie-autouzupelniania/</guid>
      <description>Po aktualizacji Vim przestało działać autouzupełnianie. Wymagane jest w takim przypadku przejście do katalogu wtyczki YouCompleteMe, oraz odpalenie kompilacji ze wsparciem dla języka C oraz Go.
~ $ cd .vim/bundle/YouCompleteMe/ YouCompleteMe (master) $ ./install.py --clang-completer --gocode-completer  </description>
    </item>
    
    <item>
      <title>Go: odbiorca metody, przykłady</title>
      <link>https://practical-coder.github.io/post/go-odbiorca-metody-przyk%C5%82ady/</link>
      <pubDate>Sun, 19 Jun 2016 09:03:31 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/go-odbiorca-metody-przyk%C5%82ady/</guid>
      <description>W Go po słowie kluczowym func, a przed nazwą metody, możemy określić jej odbiorcę. Jeżeli obiekt nie będzie modyfikowany, odbiorcę metody określamy przez jego wartość. W metodach Len(), Cap(), IsEmpty() oraz Top() odbiorcą jest Stack. Potrzebują one informacji o aktualnym stanie obiektu tylko do odczytu. Natomiast jeżeli metoda modyfikuje obiekt, wtedy odbiorca określany jest wskaźnikiem do obiektu. Tak się dzieje w metodach Push() i Pop(). Tam odbiorcą jest *Stack.
package stack import &amp;quot;errors&amp;quot; type Stack []interface{} func (stack Stack) Len() int { return len(stack) } func (stack Stack) Cap() int { return cap(stack) } func (stack Stack) IsEmpty() bool { return len(stack) == 0 } func (stack Stack) Top() (interface{}, error) { if stack.</description>
    </item>
    
    <item>
      <title>Testing notes with curl</title>
      <link>https://practical-coder.github.io/post/testing-notes-with-curl/</link>
      <pubDate>Sun, 19 Jun 2016 08:11:03 +0200</pubDate>
      
      <guid>https://practical-coder.github.io/post/testing-notes-with-curl/</guid>
      <description>To test creating notes with api, use sample note.json in main directory and post it with curl:
cat note.json | c -XPOST http://localhost:8181/notes -d @-  </description>
    </item>
    
  </channel>
</rss>